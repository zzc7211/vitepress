import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{b as e,o as t,K as a}from"./vendor.18923375.js";const m='{"title":"Global Component","description":"","frontmatter":{},"headers":[{"level":2,"title":"Content","slug":"content"},{"level":2,"title":"ClientOnly","slug":"clientonly"},{"level":2,"title":"OutboundLink","slug":"outboundlink"}],"relativePath":"guide/global-component.md","lastUpdated":1642158167143}',s={},o=a(`<h1 id="global-component" tabindex="-1">Global Component <a class="header-anchor" href="#global-component" aria-hidden="true">#</a></h1><p>VitePress comes with few built-in component that can be used globally. You may use these components in your markdown or your custom theme configuration.</p><h2 id="content" tabindex="-1">Content <a class="header-anchor" href="#content" aria-hidden="true">#</a></h2><p>The <code>Content</code> component displays the rendered markdown contents. Useful <a href="https://vitepress.vuejs.org/guide/customization.html" target="_blank" rel="noopener noreferrer">when creating your own theme</a>.</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Custom Layout!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="clientonly" tabindex="-1">ClientOnly <a class="header-anchor" href="#clientonly" aria-hidden="true">#</a></h2><p>The <code>ClientOnly</code> component renderes its slot only at client side.</p><p>Because VitePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the universal code requirements. In short, make sure to only access Browser / DOM APIs in beforeMount or mounted hooks.</p><p>If you are using or demoing components that are not SSR-friendly (for example, contain custom directives), you can wrap them inside the <code>ClientOnly</code> component.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NonSSRFriendlyComponent</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="outboundlink" tabindex="-1">OutboundLink <a class="header-anchor" href="#outboundlink" aria-hidden="true">#</a></h2><p>The indicator <code>OutboundLink</code> is used to denote external links. In VitePress, this component has been followed by every external link.</p>`,12),p=[o];function l(c,i,r,u,d,h){return t(),e("div",null,p)}var _=n(s,[["render",l]]);export{m as __pageData,_ as default};
